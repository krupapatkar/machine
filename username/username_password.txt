// Create user with OTP
export const createUser = async (req: Request, res: Response): Promise<any> => {
  try {
    const userData: User = req.body;

    // Check if user with email exists
    const existingUser = await prisma.user.findUnique({
      where: { email: userData.email },
    });

    // Handle OTP limit and expiry
    if (existingUser) {
      const otpCreated = existingUser.otpCreatedAt ?? new Date(0);

      if (
        existingUser.otpCount >= MAX_OTP_TRIES &&
        isSameDay(now(), otpCreated)
      ) {
        return handleError(res, null, messages.otpLimitReached);
      }

      if (
        existingUser.otp &&
        diffInMinutes(now(), otpCreated) > OTP_EXPIRY_MINUTES
      ) {
        return handleError(res, null, messages.otpExpired);
      }
    }

    const otp = generateOTP();
    await sendOtpEmail(userData.email, otp, userData.name);
    const hashedPassword = await bcrypt.hash(userData.password, 10);

    const user = await prisma.user.upsert({
      where: { email: userData.email },
      update: {
        name: userData.name,
        user_name: userData.user_name,
        mobile: userData.mobile,
        country_code: userData.country_code,
        country_id: userData.country_id,
        state_id: userData.state_id,
        city_id: userData.city_id,
        password: hashedPassword,
        otp,
        otpCreatedAt: now(),
        otpCount: existingUser ? existingUser.otpCount + 1 : 1,
      },
      create: {
        name: userData.name,
        user_name: userData.user_name,
        email: userData.email,
        mobile: userData.mobile,
        country_code: userData.country_code,
        country_id: userData.country_id,
        state_id: userData.state_id,
        city_id: userData.city_id,
        password: hashedPassword,
        otp,
        otpCreatedAt: now(),
        otpCount: 1,
      },
      include: {
        country: true,
        state: true,
        city: true,
      },
    });

    const formatted: UserResponse = {
      id: user.id,
      name: user.name,
      user_name: user.user_name,
      email: user.email,
      password: user.password,
      mobile: user.mobile,
      country_code: user.country_code,
      country_name: user.country?.name || "",
      state_name: user.state?.name || "",
      city_name: user.city?.name || "",
      otp: user.otp,
    };

    return handleSuccess(res, formatted, messages.userCreateSuccess);
  } catch (error) {
    return handleError(res, error, messages.userCreateError);
  }
};


in this code otp show on api response and email but in database otp show as null why give me a code,and also show me a output.